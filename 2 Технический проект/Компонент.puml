@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/postgresql.puml
!include DEVICONS/react.puml

LAYOUT_WITH_LEGEND()

title Контекстная диаграмма C4 для платформы трейдинга

Person(client_trader, "Трейдер", "")
Person(client_broker, "Брокер", "")
Person(client_admin, "Администратор", "сис. админ")
Person(client_analyst, "Аналитик", "Штатный аналитик продукта")

System(trading_frontend_system, "Frontend", "React & Redux\n Предоставляет UI для работы с приложением", $sprite="react")

System_Boundary(trading_backend_system, "Backend") {
  Container(api_gateway_container, "API Gateway", "C#, ASP.NET", "Распределяет запросы по нужным микросервисам")

  Container_Boundary(microservice_container, "Microservice") {
    Container_Boundary(microservice_api_container, "API") {
      Component(event_consumer_component, "Event Consumer", "C# ASP.NET")
      Component(microservice_event_handler_component, "Event Handler", "C# ASP.NET")
      Component(microservice_controller_component, "Controller", "C# ASP.NET")
    }

    Container_Boundary(microservice_infrastructure_container, "Infrastructure") {
      Component(mq_provider_component, "MQ Provider", "C# ASP.NET")
      Component(db_provider_component, "DB Provider", "C# ASP.NET")
    }

    Container_Boundary(microservice_application_container, "Application") {
      Component(microservice_service_component, "Service", "C# ASP.NET")
    }

    Container_Boundary(microservice_domain_container, "Domain") {
      Component(microservice_domain_entity_component, "Domain Entity", "C# ASP.NET")
    }

    'Связи внутри контейнера
    event_consumer_component --> mq_provider_component
    event_consumer_component --> microservice_event_handler_component
    microservice_controller_component --> microservice_service_component
    microservice_event_handler_component --> microservice_service_component

    microservice_service_component --> db_provider_component
    microservice_service_component --> microservice_domain_entity_component
    microservice_event_handler_component --> microservice_domain_entity_component
  }

  ContainerDb(container_db, "Database", "PostgreSQL", "", $sprite="postgresql", "Проводящиеся и проведённые транзакции")
  
  ContainerQueue(container_mq, "Message Queue", "RabbitMQ")
}

System_Ext(proxy_system, "Обратный прокси-сервер", "Защите от DDOS-атак")

client_trader --> proxy_system : "Использовать | HTTP"
client_broker --> proxy_system : "Использовать | HTTP"
client_admin --> proxy_system : "Использовать | HTTP"
client_analyst --> proxy_system : "Использовать | HTTP"

proxy_system --> trading_frontend_system : "HTTP-запрос"

trading_frontend_system --> api_gateway_container : "HTTP-запрос"

api_gateway_container --> microservice_controller_component : "HTTP-запрос"

db_provider_component --> container_db : "Передать запрос | TCP"

mq_provider_component --> container_mq : "Отправить событие"

@enduml